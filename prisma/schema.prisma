// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("POSTGRES_PRISMA_URL")
  directUrl = env("POSTGRES_URL_NON_POOLING")
}

model User {
  id           String        @id @default(cuid())
  name         String?
  email        String        @unique
  image        String?
  emailVerified DateTime?
  trips        TripMember[]
  expensesPaid Expense[]
  accounts     Account[]
  sessions     Session[]
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Account {
  id                String  @id @default(cuid())
  userId            String  @map("user_id")
  type              String
  provider          String
  providerAccountId String  @map("provider_account_id")
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verificationtokens")
}

model Trip {
  id           String        @id @default(cuid())
  name         String
  baseCurrency String        @default("USD")
  startDate    DateTime?
  endDate      DateTime?
  isActive     Boolean       @default(false)
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  members      TripMember[]
  expenses     Expense[]
}

model TripMember {
  id     String @id @default(cuid())
  trip   Trip   @relation(fields: [tripId], references: [id], onDelete: Cascade)
  tripId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String
  role   String @default("member") // member, admin
  
  createdAt DateTime @default(now())
  
  @@unique([tripId, userId])
}

model Expense {
  id              String         @id @default(cuid())
  trip            Trip           @relation(fields: [tripId], references: [id], onDelete: Cascade)
  tripId          String
  description     String
  amount          Float
  currency        String
  receiptImageUrl String?
  date            DateTime       @default(now())
  paidBy          User           @relation(fields: [paidById], references: [id], onDelete: Cascade)
  paidById        String
  splits          ExpenseSplit[]
  createdAt       DateTime       @default(now())
  updatedAt       DateTime       @updatedAt
}

model ExpenseSplit {
  id         String  @id @default(cuid())
  expense    Expense @relation(fields: [expenseId], references: [id], onDelete: Cascade)
  expenseId  String
  userId     String
  amountOwed Float
  
  @@unique([expenseId, userId])
}